---
description: REST API OpenAPI Documentation Guidelines
alwaysApply: false
---
# Scramble OpenAPI Documentation Guidelines

This project uses **Scramble** (https://scramble.dedoc.co/) to automatically generate OpenAPI 3.1.0 documentation from Laravel code.

## Configuration

### Scramble Setup
- **Config file**: `config/scramble.php`
- **Export path**: `api.json` (root directory)
- **Documentation UI**: Available at `/docs/api` (Stoplight Elements)
- **API base path**: `/api`

### Security Configuration
```php
// In AppServiceProvider.php
Scramble::afterOpenApiGenerated(function (OpenApi $openApi) {
    $openApi->secure(SecurityScheme::http('bearer', 'JWT'));
});
```

## Documentation Standards

### API Resource Documentation
- **Always use `#[SchemaName('ResourceName')]`** on JsonResource classes
- Use descriptive summary and description in controller docblocks
- Add `@response` annotations for complex return types

Example:
```php
#[SchemaName('Item')]
class ItemResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        // ... implementation
    }
}
```

### Controller Method Documentation
```php
/**
 * Get all Items.
 *
 * @response AnonymousResourceCollection<ItemResource>
 */
public function index(Request $request): AnonymousResourceCollection
{
    return ItemResource::collection(Item::all());
}
```

### Custom Transformers
- **NullableFieldsTransformer**: Applied globally to handle nullable fields correctly
- Located in: `app/Scramble/Transformers/NullableFieldsTransformer.php`

## Generating Documentation

### Export API Specification
```bash
# Generate api.json
composer export:api
# or
php artisan scramble:export
```

### Generate Client Code
```bash
# Generate Dart client for Flutter app
composer generate:api-client
```

This command:
1. Exports the OpenAPI specification to `api.json`
2. Uses OpenAPI Generator to create Dart client in `packages/locker_api/`
3. Configures client with project-specific settings

## API Design Guidelines

### Response Structure
- **Always use JsonResource classes** for API responses
- **No wrapping**: `JsonResource::withoutWrapping()` is configured
- **Consistent naming**: Use clear, descriptive field names

### Error Handling
- Standard Laravel exception responses are automatically documented
- Authentication errors return 401
- Validation errors return 422 with detailed field information
- Authorization errors return 403

### Route Organization
- Group related routes logically
- Use route model binding for resource routes
- Apply middleware consistently (auth:sanctum, AdminMiddleware)

## Custom Schema Names
Use these standardized schema names:
- `Item` - For item resources
- `User` - For user resources  
- `Locker` - For locker resources
- `ItemLoan` - For loan resources
- `TokenResponse` - For authentication responses

## Testing Documentation
- Check generated documentation at `/docs/api`
- Verify "Try It" functionality works correctly
- Ensure all endpoints have proper descriptions and examples
- Test authentication flows in the UI

## Updating Documentation
Documentation is automatically regenerated when:
- Route definitions change
- Controller method signatures change
- JsonResource classes are modified
- New endpoints are added

Always run `composer export:api` after significant API changes to update the specification file.
