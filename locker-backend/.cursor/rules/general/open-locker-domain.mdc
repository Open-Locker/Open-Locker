---
alwaysApply: true
---
# Open-Locker Domain Guidelines

This project implements a digital locker sharing system for lending physical items. Follow these domain-specific conventions.

## Domain Model Overview

### Core Entities

#### User
- **Purpose**: System users who can borrow items and access admin functions
- **Key Attributes**: `name`, `email`, `is_admin`
- **Relationships**: Has many `ItemLoan` records
- **Authentication**: Laravel Sanctum tokens

#### Item
- **Purpose**: Physical objects that can be borrowed
- **Key Attributes**: `name`, `description`, `image_path`, `locker_id`
- **Relationships**: Belongs to one `Locker`, has many `ItemLoan` records
- **Business Rule**: Must be assigned to exactly one locker

#### Locker
- **Purpose**: Physical storage compartments controlled via Modbus
- **Key Attributes**: `name`, `unit_id`, `coil_address`, `input_address`, `status`
- **Relationships**: Has one `Item`
- **Hardware Mapping**: Directly corresponds to physical locker hardware

#### ItemLoan
- **Purpose**: Tracks borrowing and returning of items
- **Key Attributes**: `item_id`, `user_id`, `borrowed_at`, `returned_at`, `notes`
- **Business Rules**: 
  - One active loan per item (returned_at IS NULL)
  - Borrowed timestamp required
  - User can have multiple active loans

## Business Rules

### Item Borrowing
1. **Pre-conditions**: Item must be available (no active loan)
2. **Process**: Create ItemLoan record + Open locker
3. **Post-conditions**: Item marked as borrowed, locker opened

```php
// Controller should use database transactions
DB::transaction(function () use ($lockerService, $item, $request) {
    ItemLoan::create([
        'item_id' => $item->id,
        'user_id' => $request->user()->id,
        'borrowed_at' => now(),
    ]);
    
    $lockerService->openLocker($item->locker);
});
```

### Item Returning  
1. **Pre-conditions**: User must have active loan for the item
2. **Process**: Update ItemLoan returned_at + Open locker
3. **Post-conditions**: Item marked as available, locker opened

### Locker Status Management
- **Automatic**: Background polling updates status every 0.5 seconds
- **Manual**: Admin can trigger locker opening via API
- **Status Enum**: `Open`, `Closed`, `Unreachable`, `Unknown`

## API Response Patterns

### Success Responses
```php
// Item operations
return response()->json([
    'status' => true,
    'message' => __('Item borrowed successfully'),
]);

// Data responses use JsonResource collections
return ItemResource::collection(Item::all());
```

### Error Responses
```php
// Business logic errors
return response()->json([
    'status' => false,
    'message' => __('Item is already borrowed'),
]);
```

## Database Conventions

### Table Structure
- **Primary keys**: Auto-incrementing integers (`id`)
- **Timestamps**: Laravel timestamps (`created_at`, `updated_at`)
- **Foreign keys**: Follow `{table}_id` convention
- **Enum fields**: Use string enums with clear values

### Migration Patterns
```php
// Use enum values from PHP enum classes
$table->enum('status', array_map(
    fn (LockerStatus $status) => $status->value, 
    LockerStatus::cases()
))->default(LockerStatus::Unknown->value);
```

### Model Relationships
```php
// Always define inverse relationships
// Item model
public function locker(): HasOne
{
    return $this->hasOne(Locker::class, 'id', 'locker_id');
}

// Locker model  
public function item(): HasOne
{
    return $this->hasOne(Item::class, 'locker_id', 'id');
}
```

## Service Layer Patterns

### LockerService Responsibilities
- Hardware communication (Modbus)
- Status polling and updates
- Locker opening operations
- Error handling and logging

### Controller Responsibilities  
- Request validation (Form Requests)
- Authorization (Policies/Middleware)
- Service orchestration
- Response formatting (JsonResource)

### Avoid in Controllers
- Direct hardware communication
- Complex business logic
- Database queries (delegate to services/repositories)

## Error Handling

### Hardware Errors
```php
try {
    $lockerService->openLocker($locker);
} catch (ModbusIOException $e) {
    Log::error("Hardware communication failed: " . $e->getMessage());
    return response()->json([
        'status' => false,
        'message' => __('Locker operation failed'),
    ], 500);
}
```

### Business Logic Errors
- Use descriptive error messages
- Return appropriate HTTP status codes
- Log significant errors for debugging

## Testing Conventions

### Feature Tests
- Test complete user workflows (borrow/return flow)
- Include authentication in all protected endpoint tests
- Test both success and failure scenarios

### Example Test Structure
```php
public function test_user_can_borrow_available_item(): void
{
    $user = User::factory()->create();
    $item = Item::factory()->create();
    
    $response = $this->actingAs($user)->postJson(
        route('items.borrow', $item->id)
    );
    
    $response->assertStatus(200)
        ->assertJson(['status' => true]);
    
    $this->assertDatabaseHas('item_loans', [
        'item_id' => $item->id,
        'user_id' => $user->id,
        'returned_at' => null,
    ]);
}
```

## File Upload Handling

### Item Images
- **Storage**: Public disk (`storage/app/public`)
- **URL Generation**: Use `Storage::url()` in JsonResource
- **Validation**: Image files only, reasonable size limits
- **Filament**: FileUpload component with public visibility

```php
// In ItemResource
'image_url' => $this->resource->image_path ? 
    config('app.url') . Storage::url($this->resource->image_path) : null,
```

## Admin Panel (Filament) Guidelines

### Resource Configuration
- Keep forms simple and focused
- Use relationship selects for foreign keys
- Include search functionality on relevant columns
- Show current borrower information where applicable

### Security
- Admin middleware protects all admin routes
- Use `AdminMiddleware` class for route protection
- Admin status managed via User model `isAdmin()` method

## Internationalization

### Message Keys
- Use descriptive translation keys
- Group by feature: `items.borrowed_successfully`
- Provide English fallbacks for all messages

### Current Implementation
- Messages use `__()` helper function
- Fallback to English built into Laravel
- Future: Add translation files for multiple languages

## Development Workflow

### Adding New Features
1. Create/update migrations for data changes
2. Update models with relationships and casts
3. Implement service layer logic
4. Create/update controllers with proper validation
5. Add JsonResource classes for API responses
6. Write feature tests
7. Update API documentation (automatically via Scramble)

### Hardware Integration
1. Define Modbus addresses in database
2. Test with LockerService methods
3. Handle errors gracefully
4. Add logging for debugging
5. Update status polling if needed
