#!/bin/sh

# Function to output messages with color
green() {
    printf '\033[0;32m%s\033[0m\n' "$1" >&1
}

blue() {
    printf '\033[0;34m%s\033[0m\n' "$1" >&1
}

red() {
    printf '\033[1;31m%s\033[0m\n' "$1" >&2
}

white() {
    printf '\033[1;37m%s\033[0m\n' "$1" >&1
}

# Ensure default output goes to stdout
white "Starting Hook Manager..."

# Find out which files have changed
CHANGED_FILES=$(git diff --cached --name-only)

# Define projects in the monorepo
PROJECTS="locker-backend"

# Error status variable (in case a hook fails)
HOOK_FAILED=0

# Determine the root directory of the repo
REPO_ROOT=$(git rev-parse --show-toplevel)

# Iterate through each project and check if it has its own hook
for PROJECT in $PROJECTS; do
  if echo "$CHANGED_FILES" | grep -q "^$PROJECT/"; then
    HOOK_PATH="$REPO_ROOT/$PROJECT/.githooks/pre-commit"

    if [ -f "$HOOK_PATH" ]; then
      white "🚀 Running hook for $PROJECT..."
      chmod +x "$HOOK_PATH"  # If necessary

      # Execute hook and prefix each line of output with the project name
      TEMP_OUTPUT=$(mktemp)
      TEMP_ERROR=$(mktemp)

      # Execute the hook and separate stdout and stderr
      (cd "$REPO_ROOT/$PROJECT" && "$HOOK_PATH") > "$TEMP_OUTPUT" 2> "$TEMP_ERROR" || HOOK_FAILED=1

      # Prefix and output stdout lines in blue
      while IFS= read -r line; do
        white "[$PROJECT] $line"
      done < "$TEMP_OUTPUT"

      # Prefix and output stderr lines in red (only if there are errors)
      if [ -s "$TEMP_ERROR" ]; then
        while IFS= read -r line; do
          red "[$PROJECT] $line"
        done < "$TEMP_ERROR"
      fi

      # Clean up temporary files
      rm "$TEMP_OUTPUT" "$TEMP_ERROR"
    else
      green "✅ No hook found for $PROJECT – skipped."
    fi
  fi
done

# If a hook fails, abort the commit
if [ $HOOK_FAILED -ne 0 ]; then
  red "❌ At least one hook failed. Commit aborted."
  exit 1
fi

green "✅ All hooks executed successfully."
exit 0
